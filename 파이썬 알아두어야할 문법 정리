input() = 한줄의 문자열을 입력받는 함수
map() = 리스트의 모든 원소에 각각 특정한 함수를 적용할 때 사용
공백을 기준으로 구분된 데이터를 입력받을 때 다음과 같이 사용한다
ex) list(map(int, input().split()))
-----------------------------------------------
sys.stdin.readline().rstrip()매서드를 활용하면 입력값을 빠르게 받을 수 있다. -> 시간초과가 날경우 이렇게해서 입력시간을 줄일 수 있음.
rstrip()을 사용하는 이유는 입력 후 엔터가 줄바꿈으로 입력되기 때문이다
-----------------------------------------------
str() -> 정수형 데이터를 문자열로 바꿀 때 사용
ex) answer = 7
    print("정답은 " + str(answer) + "입니다.")

이 방법외에도  f-string을 활용하여 바꿀 수 도 있음
ex) answer = 7
    print(f"정답은 {answer}입니다.")
-----------------------------------------------
pass 키워드
아무것도 처리하고 싶지 않을 때 pass 키워드를 사용할 수 있다.
ex) 디버깅 과정에서 조건문의 형태만 만들어 놓고 조건문을 처리하는 부분은 비워놓고 싶은 경우
score = 85
if score >= 80:
    pass #나중에 작설할 소스코드
else:
    print("80점 이하")
print("종료")

-----------------------------------------------
조건문의 간소화
조건문에서 실행될 소스코드가 한줄일 경우에는 줄바꿈을 하지 않고도 간략하게 표현할 수 있다.
score = 85
if score >= 80: result = "Success"
else: result = "Fail"
-----------------------------------------------
조건부 표현식은 if~else문을 한줄에 작성할 수 있도록 해줍니다.
score = 85
result = "Success" if score >= 80 else "Fail"
print(result)
-> 주의할 점은 if문을 기준으로 왼쪽이 참, 오른쪽이 거짓이다.
-----------------------------------------------
range() -> 연속적인 값을 차례대로 순회할 때 사용
    이때 range(시작값, 끝값+1)형태로 사용한다.
    인자를 하나만 넣으면 자동으로 시작값은 0이된다.
-----------------------------------------------
continue -> 반복문에서 남은 코드의 실행을 건너뛰고, 다음 반복을 진행하고자 할 때 사용한다.
ex) score = [90, 85, 77, 65, 41]
    cheating_student_list = {2, 4}
    for i in range(5):
        if i+1 in cheating_student_list:
            continue #부정행위를 한 학생은 제외되도록 함
        if score[i] >= 80:
            print(i+1, "번 학생은 합격입니다.")
-----------------------------------------------
break -> 반복문을 즉시 탈출하고 싶을 때 사용
ex) i=1
    while True:
        print("현재 i의 값:", i)
        if i == 5:
            break
        i += 1

-----------------------------------------------
중첩된 반복문 사용하는 법(예제 : 구구단)
ex) for i in range(2, 10):
        for j in range(1,10):
            print(i, "X", j, = "=", i*j)
        print()

-----------------------------------------------
함수란?
특정한 작업을 하나의 단위로 묶어놓은 것을 의미
함수를 사용하면 소스코드의 반복을 줄일 수 있다.
-----------------------------------------------
내장함수 : 파이썬에서 기본적으로 제공하는 함수
사용자 정의함수 : 개발자가 직접 정의하여 사용하는 함수
-> 매개변수 : 함수내부에서 사용할 변수
    반환값 : 함수에서 처리된 결과를 반환
"""     def 함수명(매개변수):
        실행할 소스코드
        return 반환 값"""
ex) def(a,b):
        return a + b
    print(add(3,7))
-----------------------------------------------
global 키워드 -> 함수 바깥에 선언된 변수를 바로참조
ex) a = 0 #함수 바깥에 선언된 변수
    def func():
        global a #함수 바깥에 선언된 변수 a를 가져옴
        a += 1
    for i in range(10):
        func()
    print(a)
-----------------------------------------------
파이썬은 다른 언어와 달리 여러개의 반환값을 가질 수 있다.
-----------------------------------------------
람다 표현식 -> 함수를 간단하게 작성할 수 있다.
특정한 기능을 수행하는 함수를 한 줄에 작성할 수 있다.
람다 표현식의 예시1
ex) def add(a,b):
        return a + b
    print(add(3,7)) #일반적인 add()매서드 사용
-----------------------------------------------
위 코드를 람다식으로 표현하면 한줄로 표현할 수 있다. 이처럼 구현하면 코드의 길이를 줄일 수 있다.
print((lambda a,b: a+b)(3,7))#람다 표현식으로 구현한 add()매서드
-----------------------------------------------
람다 표현식의 예시2
array = [('홍길동', 50), ('이순신', 32), ('이무개', 74)]
def my_key(x):
    return x[1] #정렬 기준을 두번째를 기준으로 한다.
print(sorted(array, key = mey_key))
-----------------------------------------------
위 코드를 람다식으로 한줄로 다음과 같이 표현할 수 있다.
print(sorted(array, key = lambda x: x[1]))
-----------------------------------------------
람다 표현식의 예시3
list1 = [1,2,3,4,5]
list2 = [6,7,8,9,10]
result = map(lambda a,b: a+b, list1,list2)
print(list(result))
-----------------------------------------------
 sep로 값 사이에 문자 넣기
값 사이에 공백이 아닌 다른 문자를 넣고 싶을 수도 있습니다. 이때는 다음과 같이 print의 sep에 문자 또는 문자열을 지정해주면 됩니다(sep는 구분자라는 뜻의 separator에서 따왔습니다).
Ex ) >>> print(1, 2, 3, sep=', ')    # sep에 콤마와 공백을 지정
1, 2, 3
>>> print(4, 5, 6, sep=',')    # sep에 콤마만 지정
4,5,6
>>> print('Hello', 'Python', sep='')    # sep에 빈 문자열을 지정
HelloPython
>>> print(1920, 1080, sep='x')    # sep에 x를 지정
1920x1080

sep=', '처럼 콤마와 공백을 넣어주면 1, 2, 3과 같은 형태로 출력됩니다.
물론 공백 없이 콤마만 지정해도 됩니다. 
또한, sep=''처럼 빈 문자열을 지정하면 각각의 값은 서로 붙어서 출력됩니다. 
특히 sep에는 'x'와 같은 일반적인 문자도 넣을 수 있습니다
-----------------------------------------------
 __getitem__ 메서드
시퀀스 객체에서 [ ](대괄호)를 사용하면 실제로는 __getitem__ 메서드를 호출하여 요소를 가져옵니다. 따라서 다음과 같이 __getitem__ 메서드를 직접 호출하여 요소를 가져올 수도 있습니다.

시퀀스객체.__getitem__(인덱스)

>>> a = [38, 21, 53, 62, 19]
>>> print(a.__getitem__(1))
>>> 21
-----------------------------------------------

문자열

문자열은 ' '(작은따옴표) 또는 " "(큰따옴표)로 묶어서 표현합니다.

'Hello, world!'
"Hello, world!"
-----------------------------------------------
여러 줄로 된 문자열

여러 줄로 된 문자열은 '''(작은따옴표 3개)로 시작해서 '''로 닫거나 """(큰따옴표 3개)로 시작해서 """로 닫아서 표현합니다.

'''Hello, world!
안녕하세요.
Python입니다.'''
 
"""Hello, world!
안녕하세요.
Python입니다."""
-----------------------------------------------
리스트

리스트는 여러 개의 값(요소)을 일렬로 늘어놓은 형태입니다. 변수에 값을 저장할 때 [ ](대괄호)로 묶어주면 리스트가 되며 각 값은 ,(콤마)로 구분합니다. 리스트에 저장된 요소에 접근할 때는 [ ] 안에 인덱스를 지정해줍니다. 특히 리스트의 인덱스는 0부터 시작합니다.

리스트 = [값, 값, 값]         # 리스트 만들기
리스트 = []                   # 빈 리스트 만들기
리스트 = list()               # 빈 리스트 만들기
리스트 = list(range(횟수))    # range로 리스트 만들기
 
리스트[인덱스]                # 리스트의 요소에 접근
리스트[0]                     # 리스트의 인덱스는 0부터 시작하므로 첫 번째 요소
리스트[인덱스] = 값           # 리스트의 요소에 값 저장
-----------------------------------------------
range

range는 연속된 숫자를 생성합니다. 이때 지정한 횟수는 생성되는 숫자에 포함되지 않습니다. 그리고 시작하는 숫자와 끝나는 숫자를 지정했을 때 끝나는 숫자는 생성되는 숫자에 포함되지 않습니다.

range(횟수)
range(시작, 끝)
range(시작, 끝, 증가폭)
-----------------------------------------------
튜플

튜플은 여러 개의 값(요소)을 일렬로 늘어놓은 형태입니다. 단, 요소의 값을 변경하거나 추가할 수 없습니다(읽기 전용). 변수에 값을 저장할 때 ( )(괄호)로 묶어주면 튜플이 되며 각 값은 콤마로 구분합니다. 또는, 괄호로 묶지 않고 값만 콤마로 구분해도 튜플이 됩니다. 튜플에 저장된 요소에 접근할 때는 [ ]안에 인덱스를 지정해줍니다. 그리고 리스트와 마찬가지로 튜플의 인덱스도 0부터 시작합니다.

튜플 = (값, 값, 값)          # 튜플 만들기
튜플 = 값, 값, 값            # 괄호 없이 튜플 만들기
튜플 = ()                    # 빈 튜플 만들기
튜플 = tuple()               # 빈 튜플 만들기
튜플 = tuple(list())         # tuple에 list()를 넣어서 빈 튜플 만들기
튜플 = tuple(리스트)         # tuple에 리스트를 넣어서 튜플 만들기
튜플 = tuple(range(횟수))    # range로 튜플 만들기
 
튜플[인덱스]                 # 튜플의 요소에 접근
튜플[0]                      # 튜플의 인덱스는 0부터 시작하므로 첫 번째 요소
 
튜플 = (값, )                # 요소가 한 개인 튜플 만들기
튜플 = 값,                   # 요소가 한 개인 튜플 만들기
-----------------------------------------------
시퀀스 자료형

파이썬에서 리스트(list), 튜플(tuple), range, 문자열(str)과 같이 값이 연속적으로 이어진 자료형을 시퀀스 자료형(sequence types)이라고 합니다. 그리고 시퀀스 자료형으로 만든 객체를 시퀀스 객체라고 하며, 시퀀스 객체에 들어있는 각 값을 요소(element)라고 부릅니다.
-----------------------------------------------
시퀀스 자료형의 공통 기능

파이썬의 시퀀스 자료형은 공통된 동작과 기능을 제공합니다. 따라서 리스트, 튜플, range, 문자열 등의 시퀀스 자료형은 같은 문법을 사용합니다.

값 in 시퀀스객체             # 시퀀스 객체에 특정 값이 있는지 확인
값 not in 시퀀스객체         # 시퀀스 객체에 특정 값이 없는지 확인
 
시퀀스객체1 + 시퀀스객체2    # 시퀀스 객체를 서로 연결하여 새 시퀀스 객체를 만듦
시퀀스객체 * 정수            # 시퀀스 객체를 특정 횟수만큼 반복하여 새 시퀀스 객체를 만듦
정수 * 시퀀스객체            # 시퀀스 객체를 특정 횟수만큼 반복하여 새 시퀀스 객체를 만듦
 
len(시퀀스객체)              # 시퀀스 객체의 요소 개수(길이) 구하기
 
시퀀스객체[인덱스]           # 시퀀스 객체의 요소에 접근
시퀀스객체[0]                # 시퀀스 객체의 인덱스는 0부터 시작하므로 첫 번째 요소
시퀀스객체[-음수]            # 인덱스를 음수로 지정하면 뒤에서부터 요소에 접근, -1은 뒤에서 첫 번째
시퀀스객체[인덱스] = 값      # 시퀀스 객체의 요소에 값 저장
 
del 시퀀스객체[인덱스]       # 시퀀스 객체의 요소를 삭제
-----------------------------------------------
시퀀스 자료형의 슬라이스

시퀀스 자료형은 시퀀스 객체의 일부를 잘라내서 가져오는 슬라이스(slice)를 사용할 수 있습니다. [ ](대괄호) 안에 시작 인덱스와 끝 인덱스를 지정하면 해당 범위의 요소를 잘라서 새 시퀀스 객체를 만듭니다. 단, 끝 인덱스는 가져오려는 범위에 포함되지 않습니다.

시퀀스객체[시작인덱스:끝인덱스]                 # 지정된 범위의 요소를 잘라서 새 시퀀스 객체를 만듦
시퀀스객체[시작인덱스:끝인덱스:인덱스증가폭]    # 인덱스 증가폭을 지정하면 해당 값만큼 
                                                # 인덱스를 증가시키면서 요소를 가져옴
 
시퀀스객체[:끝인덱스]      # 시작 인덱스를 생략하여 객체의 처음부터 끝 인덱스 - 1까지 가져옴
시퀀스객체[시작인덱스:]    # 끝 인덱스를 생략하여 시작 인덱스부터 마지막 요소까지 가져옴
시퀀스객체[:]              # 시작 인덱스와 끝 인덱스를 생략하여 객체 전체를 가져옴
 
시퀀스객체[0:len(시퀀스객체)]     # len을 응용하여 객체 전체를 가져옴
시퀀스객체[:len(시퀀스객체)]      # 시작 인덱스 생략, len을 응용하여 객체 전체를 가져옴
 
시퀀스객체[:끝인덱스:증가폭]      # 객체의 처음부터 증가폭만큼 인덱스를 증가시키면서 
                                  # 끝 인덱스 - 1까지 요소를 가져옴
시퀀스객체[시작인덱스::증가폭]    # 시작 인덱스부터 증가폭만큼 인덱스를 증가시키면서 
                                  # 마지막 요소까지 가져옴
시퀀스객체[::증가폭]              # 객체 전체에서 증가폭만큼 인덱스를 증가시키면서 요소를 가져옴
 
시퀀스객체[::]                    # 객체 전체를 가져옴, 시퀀스객체[:]와 같음
 
시퀀스객체[시작인덱스:끝인덱스] = 시퀀스객체                 # 범위를 지정하여 여러 요소에 값 할당
시퀀스객체[시작인덱스:끝인덱스:인덱스증가폭] = 시퀀스객체    # 증가폭만큼 인덱스를 건너뛰면서 할당
 
del 시퀀스객체[시작인덱스:끝인덱스]    # 특정 범위의 요소를 삭제(원본 객체가 변경됨)
-----------------------------------------------
딕셔너리

딕셔너리는 연관된 값을 묶어서 저장하는 자료형입니다. { }(중괄호) 안에 키: 값 형식으로 저장하며 각 키와 값은 ,(콤마)로 구분합니다. 딕셔너리에 저장된 값에 접근할 때는 [ ](대괄호) 안에 키를 지정해줍니다.

딕셔너리 = {키1: 값1, 키2: 값2}    # 딕셔너리 만들기
딕셔너리 = {}                      # 빈 딕셔너리 만들기
딕셔너리 = dict()                  # 빈 딕셔너리 만들기
 
딕셔너리[키]                       # 딕셔너리에서 키로 값에 접근
딕셔너리[키] = 값                  # 딕셔너리에서 키에 값 할당
 
키 in 딕셔너리                     # 딕셔너리에 특정 키가 있는지 확인
키 not in 딕셔너리                 # 딕셔너리에 특정 키가 없는지 확인
 
len(딕셔너리)                      # 딕셔너리의 키 개수(길이) 구하기